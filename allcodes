1. Write a program to implement FCFS (with arrival time=0 for all) Calculate
waiting time, turnaround time for each process. Calculate avg. waiting time,
avg turnaround time
#include<stdio.h>
int main()
{
int i, n;
float avgwtime = 0, avgttime = 0;
printf("Enter the number of processes: ");
scanf("%d",&n);
int process[n], waittime[n], turnaround[n], burst[n];
for(i=0;i<n;i++)
process[i]=i+1;
for(i=0;i<n;i++)
{
printf("Enter burst time for process %d: ",i+1);
scanf("%d",&burst[i]);
printf("\n");
}
waittime[0] = 0;
for (int i = 1; i < n ; i++ )
waittime[i] = burst[i-1] + waittime[i-1];
for (int i = 0; i < n ; i++)
turnaround[i] = burst[i] + waittime[i];
printf("Processes\tBurst time\tWaiting time\tTurn around time\n");
for (i=0; i<n; i++)
printf("%d\t\t%d\t\t\t%d\t\t%d\n",(i+1),burst[i],waittime[i],turnaround[i]);
printf("Gantt chart: \n");
for(i=0;i<n;i++)
{
printf("P%d | ",process[i]);
}
for(i=0;i<n;i++)
{
avgwtime=avgwtime+waittime[i];
avgttime=avgttime+turnaround[i];
}
avgwtime=avgwtime/n;
avgttime=avgttime/n;
printf("Average waiting time = %.2f ms",avgwtime);
printf("\n");
printf("Average turn around time = %.2f ms",avgttime);
}
2. Write a program to implement SJF (with arrival time=0 for all) Calculate
waiting time, turnaround time for each process. Calculate avg. waiting time,
avg turnaround time
#include<stdio.h>
int main()
{
int i,j,n,sum,pos,temp;
float avg_wait=0,avg_turnaround=0;
printf("Enter number of processes: ");
scanf("%d",&n);
int burst[n],p[n],wait[n],turnaround[n];
printf("\n");
for(i=0;i<n;i++)
{
printf("Enter Burst time for process %d: ",i+1);
scanf("%d",&burst[i]);
printf("\n");
p[i]=i+1;
}
//sorting of burst times
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(burst[j]<burst[pos])
pos=j;
}
temp=burst[i];
burst[i]=burst[pos];
burst[pos]=temp;
temp=p[i];
p[i]=p[pos];
p[pos]=temp;
}
wait[0]=0;
turnaround[0]=burst[0];
for(i=1;i<n;i++)
{
wait[i]=wait[i-1]+burst[i-1];
turnaround[i]=turnaround[i-1]+burst[i];
}
for(i=0;i<n;i++)
{
avg_wait=avg_wait+wait[i];
avg_turnaround=avg_turnaround+turnaround[i];
}
avg_wait=avg_wait/n;
avg_turnaround=avg_turnaround/n;
printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
for(i=0;i<n;i++)
printf("\np%d\t\t %d\t\t %d\t\t\t%d",p[i],burst[i],wait[i],turnaround[i]);
printf("\n");
printf("Gantt chart: \n");
for(i=0;i<n;i++)
{
printf("P%d | ",p[i]);
}
printf("\n");
printf("\n\nAverage Waiting Time = %.2f ms",avg_wait);
printf("\nAverage Turnaround Time = %.2f ms",avg_turnaround);
}
3. Write a program to implement Non preemptive Priority scheduling. Calculate waiting time, turnaround time for each process. Calculate avg. waiting time, avg. turnaround time
#include<stdio.h>
int main()
{
int i,j,pos,temp,n;
float avgwtime, avgttime;
printf("Enter the number of processes: ");
scanf("%d",&n);
int process[n],burst[n],priority[n],wtime[n],t ime[n];
for(i=0;i<n;i++)
{
process[i]=i+1;
}
for(i=0;i<n;i++)
{
printf("Enter burst time for P%d: ",i+1);
scanf("%d",&burst[i]);
}
printf("Enter priority: \n");
for(i=0;i<n;i++)
{
printf("Enter priority for P%d: ",i+1);
scanf("%d",&priority[i]);
}
//sorting of priority
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(priority[j]<priority[pos])
pos=j;
}
temp=priority[i];
priority[i]=priority[pos];
priority[pos]=temp;
temp=process[i];
process[i]=process[pos];
process[pos]=temp;
}
wtime[0]=0;
ttime[0]=burst[0];
for(i=1;i<n;i++)
{
wtime[i]=wtime[i-1]+burst[i-1];
ttime[i]=ttime[i-1]+burst[i];
}
for(i=0;i<n;i++)
{
avgwtime=avgwtime+wtime[i];
avgttime=avgttime+ttime[i];
}
avgwtime=avgwtime/n;
avgttime=avgttime/n;
printf("Gantt chart: \n");
for(i=0;i<n;i++)
{
printf("P%d | ",process[i]);
}
printf("\n");
printf("Process\t\tWaiting Time\t\t\tTurnaround Time\n");
for(i=0;i<n;i++)
{
printf("P%d\t\t\t%d\t\t\t\t%d\n",process[i],wtime[i],ttime[i]);
}
printf("Average Waiting Time is %.2f ms\n",avgwtime);
printf("Average Turnaround Time is %.2f ms\n",avgttime);
}
4. Write a program to implement Round Robin. Calculate waiting time,
turnaround time for each process. Calculate avg. waiting time, avg
turnaround time
#include<stdio.h>
int main()
{
int n;
printf("Enter Total Number of Processes: ");
scanf("%d", &n);
int wait_time = 0, ta_time = 0, arr_time[n], burst_time[n],
temp_burst_time[n];
int x = n;
for(int i = 0; i < n; i++)
{
printf("Enter Details of Process %d: \n", i + 1);
printf("Arrival Time: ");
scanf("%d", &arr_time[i]);
printf("Burst Time: ");
scanf("%d", &burst_time[i]);
temp_burst_time[i] = burst_time[i];
}
int time_slot;
printf("Enter Time Slot: ");
scanf("%d", &time_slot);
//total indicates total time
//counter indicates which process is executed
int total = 0, counter = 0,i;
printf("Process ID Burst Time Turnaround Time Waiting Time\n");
for(total=0, i=0; x!=0;)
{
if(temp_burst_time[i] <= time_slot && temp_burst_time[i] > 0)
{
total = total + temp_burst_time[i];
temp_burst_time[i] = 0;
counter=1;
}
else if(temp_burst_time[i] > 0)
{
temp_burst_time[i] = temp_burst_time[i] - time_slot;
total += time_slot;
}
if(temp_burst_time[i]==0 && counter==1)
{
x--; //decrement the process no.
printf("\nProcess No %d \t %d\t\t\t %d\t\t %d", i+1,
burst_time[i],total-arr_time[i], total-arr_time[i]-burst_time[i]);
wait_time = wait_time+total-arr_time[i]-burst_time[i];
ta_time = ta_time + total -arr_time[i];
counter =0;
}
if(i==n-1)
{
i=0;
}
else if(arr_time[i+1]<=total)
{
i++;
}
else
{
i=0;
}
}
float average_wait_time = (float)wait_time/ n;
float average_turnaround_time = (float)ta_time/ n;
printf("\nAverage Waiting Time = %.2f", average_wait_time);
printf("\nAvg Turnaround Time = %.2f", average_turnaround_time);
return 0;
}
5. Write a program to simulate the First Fit Memory Allocation Technique.
void main()
{
int i, j, temp, n, p, psize;
printf("\nEnter no of segments in memory: ");
scanf("%d", & n);
int mem[10], status[10], process[10];
for (i = 0; i < n; i++)
{
printf("Enter size %d: ",i+1);
scanf("%d", &mem[i]);
printf("Enter status %d: ",i+1);
scanf("%d", &status[i]);
printf("Enter process number %d: ",i+1);
scanf("%d", &process[i]);
}
printf("\nSrNo\tMemory\t\tStatus\tProcess");
for (i = 0; i < n; i++)
printf("\n%d\t%d\t\t%d\tP(%d)", (i + 1), mem[i], status[i], process[i]);
printf("\nEnter new process number: ");
scanf("%d", & p);
printf("\nEnter new process size: ");
scanf("%d",& psize);
for (i = 0; i < n; i++)
{
if (status[i] == 1)
{
if (mem[i] == psize)
{
process[i] = p;
status[i] = 0;
n++;
break;
}
else if (mem[i] > psize)
{
temp = mem[i] - psize;
mem[i] = psize;
status[i] = 0;
process[i] = p;
for (j = n; j >= i; j--)
{
mem[j + 1] = mem[j];
status[j + 1] = status[j];
process[j + 1] = process[j];
}
mem[i + 1] = temp;
status[i + 1] = 1;
process[i + 1] = -1;
n++;
break;
}
}
}
printf("\nFirst Fit");
printf("\nSrNo\tMemory\t\tStatus\tProcess");
for (i = 0; i < n; i++)
printf("\n%d\t%d\t\t%d\tP(%d)", (i + 1), mem[i], status[i], process[i]);
}
6. Write programs to simulate the Best Fit Memory Allocation Technique.
void main()
{
int i, j, temp, n, p, psize;
printf("\nEnter no of segments in memory: ");
scanf("%d", & n);
int mem[10], status[10], process[10];
for (i = 0; i < n; i++)
{
printf("Enter size %d: ",i+1);
scanf("%d", &mem[i]);
printf("Enter status %d: ",i+1);
scanf("%d", &status[i]);
printf("Enter process %d: ",i+1);
scanf("%d", &process[i]);
}
printf("\nSrNo\tMemory\t\tStatus\tProcess");
for (i = 0; i < n; i++)
printf("\n%d\t%d\t\t%d\tP(%d)", (i + 1), mem[i], status[i], process[i]);
printf("\nEnter new process number: ");
scanf("%d", & p);
printf("\nEnter new process size: ");
scanf("%d",& psize);
int min;
for (i = 0; i < n; i++)
{
if (status[i] == 1 && mem[i] >= psize)
{
min = i;
break;
}
}
for (i = min + 1; i < n; i++)
{
if (status[i] == 1 && mem[i] >= psize && mem[i] < mem[min])
{
min = i;
}
}
if (mem[min] == psize)
{
process[min] = p;
status[min] = 0;
n++;
}
else if (mem[min] > psize)
{
temp = mem[min] - psize;
mem[min] = psize;
status[min] = 0;
process[min] = p;
for (j = n; j >= min; j--)
{
mem[j + 1] = mem[j];
status[j + 1] = status[j];
process[j + 1] = process[j];
}
mem[min + 1] = temp;
status[min + 1] = 1;
process[min + 1] = -1;
n++;
}
printf("\nBest Fit");
printf("\nSrNo\tMemory\t\tStatus\tProcess");
for (i = 0; i < n; i++)
printf("\n%d\t%d\t\t%d\tP(%d)", (i + 1), mem[i], status[i], process[i]);
}
7. Write programs to simulate the Worst Fit Memory Allocation Technique.
void main()
{
int i, j, temp, n, p, psize;
printf("\nEnter no of segments in memory: ");
scanf("%d", & n);
int mem[10], status[10], process[10];
for (i = 0; i < n; i++)
{
printf("Enter size %d: ",i+1);
scanf("%d", &mem[i]);
printf("Enter status %d: ",i+1);
scanf("%d", &status[i]);
printf("Enter process %d: ",i+1);
scanf("%d", &process[i]);
}
printf("\nSrNo\tMemory\t\tStatus\tProcess");
for (i = 0; i < n; i++)
printf("\n%d\t%d\t\t%d\tP(%d)", (i + 1), mem[i], status[i], process[i]);
printf("\nEnter new process number: ");
scanf("%d", & p);
printf("\nEnter new process size: ");
scanf("%d",& psize);
int max = 0;
for (i = 1; i < n; i++)
{
if (status[i] == 1 && mem[i] > mem[max])
max = i;
}
if (mem[max] == psize)
{
process[max] = p;
status[max] = 0;
n++;
}
else if (mem[max] > psize)
{
temp = mem[max] - psize;
mem[max] = psize;
status[max] = 0;
process[max] = p;
for (j = n; j >= max; j--)
{
mem[j + 1] = mem[j];
status[j + 1] = status[j];
process[j + 1] = process[j];
}
mem[max + 1] = temp;
status[max + 1] = 1;
process[max + 1] = -1;
n++;
}
printf("\nWorst Fit");
printf("\nSrNo\tMemory\t\tStatus\tProcess");
for (i = 0; i < n; i++)
printf("\n%d\t%d\t\t%d\tP(%d)", (i + 1), mem[i], status[i], process[i]);
}
8. Write a program to implement FIFO policy and calculate Hit ratio and
Miss ratio
#include<stdio.h>
int main()
{
int i, j, fr, n, pages[50], frames[10], k, avail, faults=0, hits, ratio;
printf("Enter the number of pages: ");
scanf("%d",&n);
printf("\nEnter page reference string: ");
for(i=1;i<=n;i++)
scanf("%d",&pages[i]);
printf("\nEnter the number of frames: ");
scanf("%d",&fr);
for(i=0;i<fr;i++)
{
frames[i]= -1;
}
j=0;
for(i=1;i<=n;i++)
{
avail=0;
for(k=0;k<fr;k++)
if(frames[k]==pages[i])
avail=1;
if (avail==0)
{
frames[j]=pages[i];
j=(j+1)%fr;
faults++;
}
for(k=0;k<fr;k++)
printf("%d\t",frames[k]);
printf("\n");
}
hits = n-faults;
printf("Page faults are: %d\n",faults);
printf("Page hits are: %d\n",hits);
printf("Hit ratio is: %d/%d",hits,n);
return 0;
}
9. Write a program to implement LRU policy and calculate Hit ratio and
Miss ratio
#include <stdio.h>
int main()
{
int fr, n, pages[30], frames[30], hits, hitflag, i, j, pos=0, faults, ratio;
printf("Enter the number of pages: ");
scanf("%d",&n);
printf("Enter page reference string: ");
for(i=0;i<n;i++)
scanf("%d",&pages[i]);
printf("Enter the number of frames: ");
scanf("%d",&fr);
for(i=0;i<fr;i++)
frames[i]=0;
for(i=0;i<n;i++)
{
hitflag=0;
for(j=0;j<fr;j++)
{
if(frames[j]==pages[i])
{
hits++;
hitflag=1;
break;
}
}
if(hitflag!=1)
{
if(pos<fr)
{
frames[pos]=pages[i];
pos++;
}
else
{
for(j=0;j<fr;j++)
{
if(frames[j]==pages[i-fr])
{
frames[j]=pages[i];
break;
}
}
}
}
for(j=0;j<fr;j++)
printf("%d\t",frames[j]);
printf("\n");
}
faults = n-hits;
printf("\nNumber of page hits: %d",hits);
printf("\nNumber of page faults: %d",faults);
printf("\nHit Ratio: %d/%d",hits,n);
return 0;
}
10. Write a program to implement Optimal policy and calculate Hit ratio
and Miss ratio
int main()
{
int fr, n, frames[10], pages[50],temp[10], flag1, flag2, flag3, i, j, k, pos, max,
faults = 0, hits, ratio;
printf("Enter the number of pages: ");
scanf("%d", &n);
printf("Enter page reference string: ");
for(i = 0; i < n; i++)
scanf("%d", &pages[i]);
printf("Enter the number of frames: ");
scanf("%d", &fr);
for(i = 0; i < fr; i++)
frames[i] = -1;
for(i = 0; i < n; i++)
{
flag1 = flag2 = 0;
for(j = 0; j < fr; j++)
{
if(frames[j] == pages[i])
{
flag1 = flag2 = 1;
break;
}
}
if(flag1 == 0)
{
for(j = 0; j < fr; j++)
{
if(frames[j] == -1)
{
faults++;
frames[j] = pages[i];
flag2 = 1;
break;
}
}
}
if(flag2 == 0)
{
flag3 =0;
for(j = 0; j < fr; j++)
{
temp[j] = -1;
for(k = i + 1; k < n; ++k)
{
if(frames[j] == pages[k])
{
temp[j] = k;
break;
}
}
}
for(j = 0; j < fr; j++)
{
if(temp[j] == -1)
{
pos = j;
flag3 = 1;
break;
}
}
if(flag3 ==0)
{
max = temp[0];
pos = 0;
for(j = 1; j < fr; j++)
{
if(temp[j] > max)
{
max = temp[j];
pos = j;
}
}
}
frames[pos] = pages[i];
faults++;
}
printf("\n");
for(j = 0; j < fr; j++)
printf("%d\t", frames[j]);
}
hits = n-faults;
printf("\n");
printf("Page faults are: %d\n",faults);
printf("Page hits are: %d\n",hits);
printf("Hit ratio is: %d/%d",hits,n);
return 0;
}
11. Write a program to simulate MVT
#include<stdio.h>
void main()
{
int i,m,n,tot;
printf("Enter total memory size: ");
scanf("%d",&tot);
printf("Enter number of pages: ");
scanf("%d",&n);
printf("Enter memory required for OS: ");
scanf("%d",&m);
int size[n];
for(i=0;i<n;i++)
{
printf("Enter size of page %d: ",i+1);
scanf("%d",&size[i]);
}
tot=tot-m;
for(i=0;i<n;i++)
{
if(tot>=size[i])
{
printf("Allocated page %d\n",i+1);
tot=tot-size[i];
}
else
printf("Page %d is blocked as its size is larger than remaining memory
size\n",i+1);
}
printf("\nExternal Fragmentation is %d",tot);
}
12. Write a program to simulate MFT
#include<stdio.h>
void main()
{
int total,i,n,parsize,os,frag=0;
printf("Enter size of memory: ");
scanf("%d",&total);
printf("Enter memory for OS: ");
scanf("%d",&os);
total = total - os;
printf("Enter no.of partitions to be divided: ");
scanf("%d",&n);
int size[n];
parsize=total/n;
for(i=0;i<n;i++)
{
printf("Enter process %d size: ",i+1);
scanf("%d", &size[i]);
if(size[i]<=parsize)
{
printf("Allocated page %d\n",i+1);
frag = frag + parsize - size[i];
}
else
printf("Page %d is blocked as its size is larger than partition size\n",i+1);
}
printf("Internal fragmentation is %d",frag);
}
13. Write a program to simulate Paging technique
#include<stdio.h>
#include<string.h>
#include<math.h>
struct page_table
{
int pgno;
int pframe;
int valid;
};
int power_of_two(int x)
{
int ans=0;
while(x!=0)
{
x=x/2;
ans += 1;
}
return ans-1;
}
int main()
{
struct page_table pt[30];
int psize,page_size,no_of_page,page_bits,offset_bits,main_size,frames;
int entries_in_pt,pa_bits,la_bits,la_add,digit,mb,kb,i,k=2;
int binary_num, decimal_num = 0,remainder,num;
printf("Enter Process Size (KB):");
scanf("%d",&psize);
printf("Enter Page Size (bytes):");
scanf("%d",&page_size);
printf("Enter Main Memory Size(MB):");
scanf("%d",&main_size);
mb=pow(2,20);
kb=pow(2,10);
psize*=kb;
main_size*=mb;
frames=(main_size/page_size);
printf("Number of Frames is: 2^%d \n",power_of_two(frames));
no_of_page=psize/page_size;
printf("Number of pages is %d \n",no_of_page);
pa_bits=power_of_two(main_size);
printf("Bits in phy add is %d \n",pa_bits);
la_bits=power_of_two(psize);
printf("Bits in Logical add is %d \n",la_bits);
page_bits=power_of_two(no_of_page);
printf("Bits required to find pages %d \n",page_bits);
offset_bits=la_bits-page_bits;
printf("Bits required to find offset %d \n",offset_bits);
//Assume only 10 frames can be allocated to the process
for(i=0;i<no_of_page;i++)
pt[i].valid=0;
printf("The first 10 entries of Table are: \n ");
printf("Page No Frame Number Valid \n");
for(i=0;i<10;i++,k+=2)
{
pt[i].pgno=i;
pt[i].pframe=k;
if(i%2==0)
pt[i].valid=1;
printf("%d \t %d \t\t %d \n",pt[i].pgno,pt[i].pframe,pt[i].valid);
}
printf("Enter logical address: ");
scanf("%d", &num);
binary_num = num >> 5; // shift right by 5 bits to extract the first 8 bits
i=0;
while(binary_num != 0)
{ remainder = binary_num % 10;
binary_num /= 10;
decimal_num += remainder * pow(2, i);
i++;}
i=0;
do
{
if(pt[i].pgno==decimal_num)
{
if(pt[i].valid==1)
{
printf("Page HIT");
}
else
printf("Page FAULT");
break;
}
else
i++;
}while(i!= no_of_page);
return 0;
}
14. Write a program to simulate Indexed File Allocation Technique
void main()
{
int f[50],i,k,j,inde[50],n,c,count=0,p;
for(i=0;i<50;i++)
f[i]=0;
x:
printf("\nEnter index block: ");
scanf("%d",&p);
if(f[p]==0)
{
f[p]=1;
printf("\nEnter no of files on index: ");
scanf("%d",&n);
}
else
{
printf("Block already allocated\n");
goto x;
}
printf("\nEnter blocks: ");
for(i=0;i<n;i++)
scanf("%d",&inde[i]);
for(i=0;i<n;i++)
if(f[inde[i]]==1)
{
printf("Block already allocated\n");
goto x;
}
for(j=0;j<n;j++)
f[inde[j]]=1;
printf("\nAllocated");
printf("\nFile indexed");
for(k=0;k<n;k++)
printf("\n%d->%d: allocated",p,inde[k]);
printf("\nEnter 1 to enter more files and 0 to exit: ");
scanf("%d",&c);
if(c==1)
goto x;
}
15. Write a program to simulate Contiguous File Allocation Technique
#include<stdio.h>
void main()
{
int f[50],i,st,j,len,c,k;
for(i=0;i<50;i++)
f[i]=0;
x:
printf("\nEnter the starting block of the file: ");
scanf("%d",&st);
printf("\nEnter length of the file: ");
scanf("%d",&len);
for(j=st;j<(st+len);j++)
{
if(f[j]==0)
{
f[j]=1;
printf("\n%d->allocated",j);
}
else
{
printf("Block already allocated");
break;
}
}
if(j==(st+len))
printf("\nThe file is allocated to disk");
printf("\nEnter 1 to enter more files and 0 to exit: ");
scanf("%d",&c);
if(c==1)
goto x;
}
16. Write program to simulate Linked File Allocation Technique
#include<stdio.h>
int main()
{
int f[50],p,i,j,k,a,st,len,n,c;
for(i=0;i<50;i++)
f[i]=0;
printf("Enter number of blocks that are already allocated: ");
scanf("%d",&p);
printf("\nEnter the blocks numbers that are already allocated: ");
for(i=0;i<p;i++)
{
scanf("%d",&a);
f[a]=1;
}
x:
printf("\nEnter the starting block of the file: ");
scanf("%d",&st);
printf("\nEnter length of the file: ");
scanf("%d",&len);
k=len;
for(j=st;j<(k+st);j++)
{
if(f[j]==0)
{
f[j]=1;
printf("\n%d->allocated",j);
}
else
{
printf("\n%d->file is already allocated",j);
k++;
}
}
printf("\nThe file is allocated to disk");
printf("\nEnter 1 to enter more files and 0 to exit: ");
scanf("%d",&c);
if(c==1)
goto x;
}
17. Write a program to calculate safe sequence using Banker’s algorithm.
#include <stdio.h>
int main()
{
int n, m, i, j, k;
printf("Enter the number of processes: ");//rows
scanf("%d",&n);
printf("Enter the number of resources: ");//columns
scanf("%d",&m);
int alloc[n][m];
int max[n][m];
int avail[m];
printf("Enter the allocation matrix: ");
for(i=0;i<n;i++)
{
for(j=0;j<m;j++)
{
scanf("%d",&alloc[i][j]);
}
}
printf("Enter the max matrix: ");
for(i=0;i<n;i++)
{
for(j=0;j<m;j++)
{
scanf("%d",&max[i][j]);
}
}
printf("Enter the available resources: ");
for(i=0;i<m;i++)
{
scanf("%d",&avail[i]);
}
int f[n], ans[n], ind = 0;
for (k = 0; k < n; k++)
{
f[k] = 0;
}
int need[n][m];
for (i = 0; i < n; i++)
{
for (j = 0; j < m; j++)
need[i][j] = max[i][j] - alloc[i][j];
}
int y = 0;
for (k = 0; k < 5; k++)
{
for (i = 0; i < n; i++)
{
if (f[i] == 0)
{
int flag = 0;
for (j = 0; j < m; j++)
{
if (need[i][j] > avail[j])
{
flag = 1;
break;
}
}
if (flag == 0)
{
ans[ind++] = i;
for (y = 0; y < m; y++)
avail[y] = avail[y] + alloc[i][y];
f[i] = 1;
}
}
}
}
int flag = 1;
for(int i=0;i<n;i++)
{
if(f[i]==0)
{
flag=0;
printf("The system is not safe");
break;
}
}
if(flag==1)
{
printf("Following is the SAFE Sequence\n");
for (i = 0; i < n - 1; i++)
printf(" P%d ->", ans[i]);
printf(" P%d", ans[n - 1]);
}
return (0);
}
18. Write a program to implement the FCFS Disk Scheduling Policy
#include<stdio.h>
int main()
{
int nt,nc,head,track[100],i,j,distance=0;
printf("Enter the number of cylinders (0 to n-1): n = ");
scanf("%d",&nc);
printf("Enter the number of requested tracks: ");
scanf("%d",&nt);
printf("Enter the current location of pointer head: ");
scanf("%d",&head);
track[0] = head;
printf("Enter the requested tracks in FIFO order: ");
for(i=1;i<=nt;i++)
{
scanf("%d",&track[i]);
if(track[i]>=nc || track[i]<0)
{
printf("INVALID INPUT!!! ABORTING!!");
return(0);
}
}
printf("The requested tracks are processed in order: %d -> ",head);
for(i=1;i<nt;i++)
printf("%d -> ",track[i]);
printf("%d \n",track[nt]);
for(i=0;i<nt;i++)
{
if(track[i]>track[i+1])
distance = distance + track[i]-track[i+1];
else
distance = distance + track[i+1]-track[i];
}
printf("The total seek distance is: %d\n",distance);
}
19. Write a program to implement the following SSTF Disk Scheduling Policy
#include<stdio.h>
int main()
{
int i,j,head,track[100],n,nc,diff[100],alloc[100],dist=0,min,temp;
printf("Enter the number of cylinders (0 to n-1): n = ");
scanf("%d",&nc);
printf("Enter the number of requested tracks: ");
scanf("%d",&n);
printf("Enter the current location of pointer head: ");
scanf("%d",&head);
temp = head;
printf("Enter the requested tracks in FIFO order: \n");
for(i=0;i<n;i++)
{
scanf("%d",&track[i]);
if(track[i]>=nc || track[i]<0)
{
printf("INVALID INPUT!!! ABORTING!!");
return(0);
}
}
// process the requests according to SSTF algorithm
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(head-track[j] >0)
diff[j] = head-track[j];
else
diff[j] = track[j]-head;
}
min = 0;
for(j=0;j<n;j++)
{
if(diff[j]<diff[min])
min = j;
}
alloc[i]=track[min];
head = track[min];
dist=dist+diff[min];
track[min]=99999;
}
printf("The requests are processed in the following order: %d -> ",temp);
for(i=0;i<n-1;i++)
printf("%d -> ",alloc[i]);
printf("%d \n",alloc[n-1]);
printf("The total seek distance is: %d \n",dist);
}
20. Write a program to implement the SCAN Disk Scheduling Policy
#include<stdio.h>
int absoluteValue(int);
void main()
{
int queue[25],n,headposition,i,j,k,seek=0, maxrange,
difference,temp,queue1[20],queue2[20],temp1=0,temp2=0;
float averageSeekTime;
printf("Enter the maximum range of Disk: ");
scanf("%d",&maxrange);
printf("Enter the number of queue requests: ");
scanf("%d",&n);
printf("Enter the initial head position: ");
scanf("%d",&headposition);
printf("Enter the disk positions to be read(queue): ");
for(i=1;i<=n;i++)
{
scanf("%d",&temp);
//Now if the requested position is greater than current headposition,then
pushing that to array queue1
if(temp>headposition)
{
queue1[temp1]=temp; //temp1 is the index variable of queue1[]
temp1++;
}
else //else if temp < current headposition,then push to array queue2[]
{
queue2[temp2]=temp; //temp2 is the index variable of queue2[]
temp2++;
}
}
//SORTING array queue1[] in ascending order
for(i=0;i<temp1-1;i++)
{
for(j=i+1;j<temp1;j++)
{
if(queue1[i]>queue1[j])
{
temp=queue1[i];
queue1[i]=queue1[j];
queue1[j]=temp;
}
}
}
//SORTING array queue2[] in descending order
for(i=0;i<temp2-1;i++)
{
for(j=i+1;j<temp2;j++)
{
if(queue2[i]<queue2[j])
{
temp=queue2[i];
queue2[i]=queue2[j];
queue2[j]=temp;
}
}
}
//Copying first array queue1[] into queue[]
for(i=1,j=0;j<temp1;i++,j++)
{
queue[i]=queue1[j];
}
//Setting queue[i] to maxrange because the head goes to end of disk and
comes back in scan Algorithm
queue[i]=maxrange;
//Copying second array queue2[] after that first one is copied, into queue[]
for(i=temp1+2,j=0;j<temp2;i++,j++)
{
queue[i]=queue2[j];
}
queue[i]=0;
//At this point, we have the queue[] with the requests in the correct order of
execution as per scan algorithm.
//Now we have to set 0th index of queue[] to be the initial headposition.
queue[0]=headposition;
for(j=0; j<=n; j++) //Loop starts from headposition. (ie. 0th index of queue)
{
difference = absoluteValue(queue[j+1]-queue[j]);
seek = seek + difference;
printf("Disk head moves from position %d to %d with Seek %d \n",
queue[j], queue[j+1], difference);
}
averageSeekTime = seek/(float)n;
printf("Total Seek Time= %d\n", seek);
printf("Average Seek Time= %f\n", averageSeekTime);
}
int absoluteValue(int x)
{
if(x>0)
return x;
else
return x*-1;
}
21. Write a program to implement the following LOOK Disk Scheduling
Policy
#include<stdio.h>
int absoluteValue(int);
void main()
{
int queue[25],n,headposition,i,j,k,seek=0, maxrange,
difference,temp,queue1[20],queue2[20],temp1=0,temp2=0;
float averageSeekTime;
printf("Enter the maximum range of Disk: ");
scanf("%d",&maxrange);
printf("Enter the number of queue requests: ");
scanf("%d",&n);
printf("Enter the initial head position: ");
scanf("%d",&headposition);
printf("Enter the disk positions to be read(queue): ");
for(i=1;i<=n;i++)
{
scanf("%d",&temp);
//Now if the requested position is greater than current headposition,then
pushing that to array queue1
if(temp>headposition)
{
queue1[temp1]=temp; //temp1 is the index variable of queue1[]
temp1++;
}
else //else if temp < current headposition,then push to array queue2[]
{
queue2[temp2]=temp; //temp2 is the index variable of queue2[]
temp2++;
}
}
//SORTING array queue1[] in ascending order
for(i=0;i<temp1-1;i++)
{
for(j=i+1;j<temp1;j++)
{
if(queue1[i]>queue1[j])
{
temp=queue1[i];
queue1[i]=queue1[j];
queue1[j]=temp;
}
}
}
//SORTING array queue2[] in descending order
for(i=0;i<temp2-1;i++)
{
for(j=i+1;j<temp2;j++)
{
if(queue2[i]<queue2[j])
{
temp=queue2[i];
queue2[i]=queue2[j];
queue2[j]=temp;
}
}
}
//Copying first array queue1[] into queue[]
for(i=1,j=0;j<temp1;i++,j++)
{
queue[i]=queue1[j];
}
//Copying second array queue2[] after that first one is copied, into queue[]
for(i=temp1+1,j=0;j<temp2;i++,j++)
{
queue[i]=queue2[j];
}
//At this point, we have the queue[] with the requests in the correct order of
execution as per LOOK algorithm.
queue[0]=headposition;
for(j=0; j<n; j++) //Loop starts from headposition. (ie. 0th index of queue)
{
difference = absoluteValue(queue[j+1]-queue[j]);
seek = seek + difference;
printf("Disk head moves from position %d to %d with Seek %d \n", queue[j],
queue[j+1], difference);
}
averageSeekTime = seek/(float)n;
printf("Total Seek Time= %d\n", seek);
printf("Average Seek Time= %f\n", averageSeekTime);
}
int absoluteValue(int x)
{
if(x>0)
return x;
else
return x*-1;
}
22. Write a program to implement the C-SCAN Disk Scheduling Policy
#include<stdio.h>
int absoluteValue(int); // Declaring function absoluteValue
void main()
{
int queue[25],n,headposition,i,j,k,seek=0, maxrange,
difference,temp,queue1[20],queue2[20],temp1=0,temp2=0;
float averageSeekTime;
printf("Enter the maximum range of Disk: ");
scanf("%d",&maxrange);
printf("Enter the number of queue requests: ");
scanf("%d",&n);
printf("Enter the initial head position: ");
scanf("%d",&headposition);
printf("Enter the disk positions to be read(queue): ");
for(i=1;i<=n;i++)
{
scanf("%d",&temp);
//Now if the requested position is greater than current headposition,then
pushing that to array queue1
if(temp>headposition)
{
queue1[temp1]=temp;
temp1++;
}
else //else if temp < current headposition,then push to array queue2[]
{
queue2[temp2]=temp;
temp2++;
}
}
//SORTING array queue1[] in ascending order
for(i=0;i<temp1-1;i++)
{
for(j=i+1;j<temp1;j++)
{
if(queue1[i]>queue1[j])
{
temp=queue1[i];
queue1[i]=queue1[j];
queue1[j]=temp;
}
}
}
//SORTING array queue2[] in ascending order
for(i=0;i<temp2-1;i++)
{
for(j=i+1;j<temp2;j++)
{
if(queue2[i]>queue2[j])
{
temp=queue2[i];
queue2[i]=queue2[j];
queue2[j]=temp;
}
}
}
//Copying first array queue1[] into queue[]
for(i=1,j=0;j<temp1;i++,j++)
{
queue[i]=queue1[j];
}
//Setting queue[i] to maxrange because the head goes toend of disk and
comes back in scan Algorithm
queue[i]=maxrange;
//Moving Disk head to the inner most cylinder, because this is Circular Scan.
queue[i+1]=0;
//Copying second array queue2[] after that first one is copied, into queue[]
for(i=temp1+3,j=0;j<temp2;i++,j++)
{
queue[i]=queue2[j];
}
queue[0]=headposition;
for(j=0; j<=n+1; j++) //Loop starts from headposition. (ie. 0th index of queue)
{
difference = absoluteValue(queue[j+1]-queue[j]);
seek = seek + difference;
printf("Disk head moves from position %d to %d with Seek %d \n", queue[j],
queue[j+1], difference);
}
averageSeekTime = seek/(float)n;
printf("Total Seek Time= %d\n", seek);
printf("Average Seek Time= %f\n", averageSeekTime);
}
int absoluteValue(int x)
{
if(x>0)
return x;
else
return x*-1;
}
23. Write a program to implement the following C-LOOK Disk Scheduling
Policy
#include<stdio.h>
int absoluteValue(int);
void main()
{
int queue[25],n,headposition,i,j,k,seek=0, maxrange,
difference,temp,queue1[20],queue2[20],temp1=0,temp2=0;
float averageSeekTime;
printf("Enter the maximum range of Disk: ");
scanf("%d",&maxrange);
printf("Enter the number of queue requests: ");
scanf("%d",&n);
printf("Enter the initial head position: ");
scanf("%d",&headposition);
printf("Enter the disk positions to be read(queue): ");
for(i=1;i<=n;i++)
{
scanf("%d",&temp);
//Now if the requested position is greater than current headposition,then
pushing that to array queue1
if(temp>headposition)
{
queue1[temp1]=temp; //temp1 is the index variable of queue1[]
temp1++; //incrementing temp1
}
else //else if temp < current headposition,then push to array queue2[]
{queue2[temp2]=temp; //temp2 is the index variable of queue2[]
temp2++;
}
}
//SORTING array queue1[] in ascending order
for(i=0;i<temp1-1;i++)
{
for(j=i+1;j<temp1;j++)
{
if(queue1[i]>queue1[j])
{
temp=queue1[i];
queue1[i]=queue1[j];
queue1[j]=temp;
}
}
}
//SORTING array queue2[] in ascending order
for(i=0;i<temp2-1;i++)
{
for(j=i+1;j<temp2;j++)
{
if(queue2[i]>queue2[j])
{
temp=queue2[i];
queue2[i]=queue2[j];
queue2[j]=temp;
}
}
}
//Copying first array queue1[] into queue[]
for(i=1,j=0;j<temp1;i++,j++)
{
queue[i]=queue1[j];
}
//Moving Disk head to the inner most requested cylinder,
//because this is Circular LOOK.
queue[i]=queue2[0];
//Copying second array queue2[] after that first one is copied, into queue[]
for(i=temp1+1,j=0;j<temp2;i++,j++)
{
queue[i]=queue2[j];
}
queue[0]=headposition;
for(j=0; j<n; j++) //Loop starts from headposition. (ie. 0th index of queue)
{
difference = absoluteValue(queue[j+1]-queue[j]);
seek = seek + difference;
printf("Disk head moves from position %d to %d with Seek %d \n",
queue[j], queue[j+1], difference);
}
averageSeekTime = seek/(float)n;
printf("Total Seek Time= %d\n", seek);
printf("Average Seek Time= %f\n", averageSeekTime);
}
int absoluteValue(int x)
{
if(x>0)
return x;
else
return x*-1;
}
